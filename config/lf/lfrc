# interpreter for shell commands
set shell sh

set icons
set number
set relativenumber
# set info 'size':'time':'atime':'ctime"
# set sixel
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
        # text/*) lf -remote "send $id \$$EDITOR \$fx";;
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

map gl ${{clear; git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit}}
map gd ${{clear; git log --all --decorate --oneline --graph}}

# cmd on-cd &{{
#     # display repository status in your prompt
#     if [ -d .git ] || [ -f .git ]; then
#     	branch=$(git branch --show-current 2>/dev/null) || true
#     	remote=$(git config --get branch.$branch.remote 2>/dev/null) || true
#     	url=$(git remote get-url $remote 2>/dev/null) || true
#         source ${HOME}/.bash/prompt.bash
#         COLOUR="true"
#         git=$(__git_ps1)|| true
#         git=$(echo ${git} | sed -e 's/\\\[//g' -e 's/\\\]//g' -e 's/\\e/\\033/g')
#     	fmt="\033[35;1m$url\033[0m: ${git}"
#     elif [ -d .hg ]; then
#     	hg=$(hg branch 2>/dev/null) || true
#     	fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [HG BRANCH:> $hg]\033[0m"
#     elif [ -d .svn ]; then
#     	svn=$(svn info 2>/dev/null | awk '/^URL: /{print $2}') || true
#     	fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [SVN URL:> $svn]\033[0m"
#     else
#     	fmt="\033[36;1m%u@%h\033[0m: \033[35;1m%d\033[0m\033[1m%f\033[0m"
#     fi
#     lf -remote "send $id set promptfmt \"$fmt\""
# }}

    #lf -remote "send $id set promptfmt \"$fmt\""
cmd on-cd &{{
    # export STARSHIP_CONFIG=~/.config/starship/starship-lf.toml
    export STARSHIP_SHELL=bash
    fmt="$(starship prompt)"
    fmt=$(echo ${fmt} | sed -e 's/\\\[//g' -e 's/\\\]//g' -e 's/\\e/\\033/g')
    lf -remote "send $id set promptfmt \"${fmt}\""
}}

cmd fzf_search ${{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    [ -n "$res" ] && lf -remote "send $id select \"$res\""
}}
map gs :fzf_search

# :lsc
cmd lsc !{{
    case "$fx" in
        *.tar*) clear; tar -tf "$fx";;
        *.zip) clear; unzip -l "$fx";;
        *.rar) clear; unrar -l "$fx";;
        *.7z) clear; 7z l "$fx";;
    esac
    clear; unzip -l $fx
}}

# :term
cmd term &{{
    if [[ -f "$fx" ]]
    then
        pth=$(dirname "$fx")
        alacritty --working-directory "$pth"
    else
        alacritty --working-directory "$fx"
    fi
}}
